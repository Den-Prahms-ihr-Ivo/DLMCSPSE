ID	Function/Method	Description	Coverage	Colour
\textbf{ F1 }	{\ttfamily azimuthAngle(A: Point, center?: Point): number}	Calculates the angle measure (in radians, with $-\pi \textless \theta \le \pi$ between the positive x-axis and the ray from the origin to the point {\ttfamily(x,y)} in the Cartesian plane.\newline If a center point is provided, the angle is calculated from the new center position.	100\%	TAGgreen
\textbf{M01}	{\ttfamily matrixTransform: void }	Applies all subsequent transformations to the initial plane, marble and plane coordinate system.	100\%	TAGgreen
\textbf{M02}	{\ttfamily resetPlane(): Plane }	resets plane to its initial position.	100\%	TAGgreen
\textbf{M03}	{\ttfamily rotatePlane(yaw: number, pitch: number, roll: number) : Plane}	Updates the rotation matrix via Euler Angles in ZYX order, rotates the plane and returns the freshly transformed plane.	100\%	TAGgreen
\textbf{M04}	{\ttfamily translatePlane(x: number, y: number, z: number): Plane}	Updates the planes translation matrix, translates the plane and returns the freshly transformed plane.	100\%	TAGgreen
\textbf{M05}	{\ttfamily getAngle2North(): number}	Returns the angle $\alpha$ between the planes x-Axis and the earth referential x-Axis in degrees. $\alpha\in\left[0..359\right]$	100\%	TAGgreen
\textbf{M06}	{\ttfamily getVerticalDistance2Plane(p: Point): number}	Returns the vertical hight difference between the plane and a point in space.	100\%	TAGgreen
\textbf{M07}	{\ttfamily getDistance2Plane(p: Point): number}	Returns the length of the vector $\vec{MP}$ from the Marble $M$ to an arbitrary Point $P$.	100\%	TAGgreen
\textbf{M08}	{\ttfamily getElevationAngle2Threat(p: Point): number}	Returns the vertical angle $\alpha$ between the Marble and an arbitrary Point. $\alpha\in\left[-179..180\right]$	100\%	TAGgreen
\textbf{M09}	{\ttfamily getAngle2Plane(location: Point): number}	Returns the horizontal/azimuth angle $\alpha$ between a point in space and the marble $\alpha\in\left[0..359\right]$	100\%	TAGgreen
\textbf{M10}	{\ttfamily getDistanceFromGround(): number}	Returns the altitude of the plane.	100\%	TAGgreen
\textbf{F02}	{\ttfamily yawPitchRoll2Matrix( \newline yaw: number,\newline pitch: number,\newline roll: number\newline): number[][]}	Returns a $3x3$ rotations matrix that represents a rotation in ZYX order in degree. \newline Yaw, Pitch and Roll are in degrees.	100\%	TAGgreen
\textbf{F03}	{\ttfamily cosineDegrees(degrees: number): number }	Calculates the cosine of a number in degrees.	100\%	TAGgreen
\textbf{F04}	{\ttfamily sineDegrees(degrees: number): number}	Calculates the sine of a number in degrees.	100\%	TAGgreen
\textbf{F05}	{\ttfamily rad2Degrees(rad: number): number}	Converts rad to degrees.	100\%	TAGgreen
\textbf{F06}	{\ttfamily crossProduct(pointA: Point, pointB: Point): Point}	Calculates the cross product between two vectors	100\%	TAGgreen
\textbf{F07}	{\ttfamily vectorLength(p: Point): number}	Calculates the length of a vector	100\%	TAGgreen
\textbf{F08}	{\ttfamily dotProduct(pointA: Point, pointB: Point): number}	Calculates the dot product of to vectors	100\%	TAGgreen
\textbf{F09}	{\ttfamily angleBetween2Points(A: Point, B: Point): number}	The final angle between is calculated according to the dihedral angle: The dot product of the two normal vectors divided by the product of their lengths. \newline cos(phi) = Norm(n_A * n_B) / (Norm(n_A) * Norm(n_B))	100\%	TAGgreen
\textbf{F10}	{\ttfamily subtract2Point(pointA: Point, pointB: Point): Point}	Subtracts two vectors.	100\%	TAGgreen
\textbf{F11}	{\ttfamily multiply(a: number[][], b: number[][]): number[][]}	Multiplies two matrices.	100\%	TAGgreen
\textbf{F12}	{\ttfamily buildTransformationMatrix( \newline rotationMatrix: number[][], \newline  translationVector: number[] \newline ): number[][]}	Builds a transformation matrix from the rotation and translation matrix.	100\%	TAGgreen
\textbf{F13}	{\ttfamily matrixTransformation( \newline transformationMatrix: number[][], \newline R: number[][] \newline ): number[][]}	Multiplies a point with a transformationsmatrix and thereby transforms it in space.	100\%	TAGgreen